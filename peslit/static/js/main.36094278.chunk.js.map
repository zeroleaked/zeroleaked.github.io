{"version":3,"sources":["logo.svg","parts/NavBar/index.js","pages/Landing/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","props","className","React","Component","Header","src","Articles","this","data","map","item","index","key","imageUrl","alt","title","description","Landing","articles","App","useSpring","opacity","from","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"isDAAAA,EAAOC,QAAU,IAA0B,kC,qLCG9BC,G,MAAb,kDACE,WAAYC,GAAQ,uCACZA,GAFV,qDAMI,OACE,yBAAKC,UAAU,eAPrB,GAA4BC,IAAMC,Y,OCiD5BC,G,wDACJ,WAAYJ,GAAQ,uCACZA,G,qDAKN,OACE,yBAAKC,UAAU,UACf,yBAAKA,UAAU,oBACf,yBAAKI,IAAI,mCAET,yBAAKJ,UAAU,OAAOI,IAAI,sC,GAZXH,IAAMC,YAkBrBG,E,kDACJ,WAAYN,GAAQ,uCACZA,G,qDAIN,OACE,yBAAKC,UAAU,YAELM,KAAKP,MAAMQ,KAAKC,KAAI,SAACC,EAAMC,GACnB,OACI,yBAAKV,UAAU,qDAAqDW,IAAKD,GACrE,yBACQV,UAAU,YACVI,IAAKK,EAAKG,SACVC,IAAKJ,EAAKK,QAElB,4BAAKL,EAAKK,OACV,2BAAIL,EAAKM,aACT,4BAAQf,UAAU,uBAAlB,yB,GAnBTC,IAAMC,WA8BhBc,EAAU,WACnB,OACI,yBAAKhB,UAAU,WACX,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAUO,KAAMA,EAAKU,aCnFlBC,MAZf,WAEE,OADcC,YAAU,CAACC,QAAS,EAAGC,KAAM,CAACD,QAAS,KAEnD,yBAAKpB,UAAU,cACf,kBAAC,EAAD,MACA,yBAAKA,UAAU,QACX,kBAAC,EAAD,SCHYsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACA,iCAEE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.36094278.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport './style.scss';\n\nexport class NavBar extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div className=\"NavBar\">\n        </div>\n    );\n  }\n}\n","import React from 'react';\n// import { FaPlusCircle } from \"react-icons/fa\";\nimport data from '../../json/landing.json';\nimport './style.scss'\n\n// class ScrollAwareDiv extends React.Component {\n//   constructor(props) {\n//     super(props)\n//     this.myRef = React.createRef()\n//     this.state = {scrollTop: 0}\n//   }\n//\n//   onScroll = () => {\n//     const scrollY = window.scrollY //Don't get confused by what's scrolling - It's not the window\n//     const scrollTop = this.myRef.current.scrollTop\n//     console.log(`onScroll, window.scrollY: ${scrollY} myRef.scrollTop: ${scrollTop}`)\n//     this.setState({\n//       scrollTop: scrollTop\n//     })\n//   }\n//\n//   render() {\n//     const {\n//       scrollTop\n//     } = this.state\n//     return (\n//       <div\n//         ref={this.myRef}\n//         onScroll={this.onScroll}\n//         style={{\n//           border: '1px solid black',\n//           width: '600px',\n//           height: '100px',\n//           overflow: 'scroll',\n//         }} >\n//         <p>This demonstrates how to get the scrollTop position within a scrollable react component.</p>\n//         <p>ScrollTop is {scrollTop}</p>\n//         <p>This demonstrates how to get the scrollTop position within a scrollable react component.</p>\n//         <p>ScrollTop is {scrollTop}</p>\n//         <p>This demonstrates how to get the scrollTop position within a scrollable react component.</p>\n//         <p>ScrollTop is {scrollTop}</p>\n//         <p>This demonstrates how to get the scrollTop position within a scrollable react component.</p>\n//         <p>ScrollTop is {scrollTop}</p>\n//         <p>This demonstrates how to get the scrollTop position within a scrollable react component.</p>\n//         <p>ScrollTop is {scrollTop}</p>\n//         <p>This demonstrates how to get the scrollTop position within a scrollable react component.</p>\n//         <p>ScrollTop is {scrollTop}</p>\n//       </div>\n//     )\n//   }\n// }\n\nclass Header extends React.Component {\n  constructor(props) {\n    super(props)\n    // console.log(screen.width);\n  }\n\n  render() {\n    return (\n      <div className=\"Header\">\n      <div className=\"main text-center\">\n      <img src=\"/images/landing/title-web.png\" />\n        </div>\n      <img className=\"wave\" src=\"/images/landing/wave-web.png\" />\n      </div>\n    )\n  }\n}\n\nclass Articles extends React.Component {\n  constructor(props) {\n    super(props)\n  }\n\n  render() {\n    return (\n      <div className=\"Articles\">\n            {\n                this.props.data.map((item, index) => {\n                        return (\n                            <div className=\"container mt-5 mb-5 bg-white rounded-5 text-center\" key={index}>\n                                <img\n                                        className=\"rounded-5\"\n                                        src={item.imageUrl}\n                                        alt={item.title}\n                                />\n                                <h3>{item.title}</h3>\n                                <p>{item.description}</p>\n                                <button className=\"btn bg-yellow green\">+ baca lebih</button>\n                            </div>\n                        );\n\n                })\n            }\n        </div>\n    )\n  }\n}\n\nexport const Landing = () => {\n    return (\n        <div className=\"Landing\">\n            <Header />\n            <Articles data={data.articles}/>\n        </div>\n    )\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.scss';\n\nimport {useSpring, animated} from 'react-spring'\n\nimport { NavBar } from './parts/NavBar'\nimport { Landing } from './pages/Landing'\n\nfunction App() {\n  const props = useSpring({opacity: 1, from: {opacity: 0}})\n  return(\n    <div className=\"App bg-red\">\n    <NavBar/>\n    <div className=\"body\">\n        <Landing />\n    </div>\n    </div>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n  <header>\n  </header>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}